# -*- coding: utf-8 -*-
"""draw_figure.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18_aCFM-cJKJpN8G5Ma-lE91LejJZkRAP
"""

import os
import errno
import numpy as np
import cv2
import json

# Remove confidence data
def clean_json_data(json_data):
  data = []
  for i in range(len(json_data)):
    if(i%3 != 0): 
      data.append(int(json_data[i-1]))
  return data

# Get x-y coordinates
def get_coordinates(json_data):
  x = []
  y = []
  for i in range(len(json_data)):
    if(i%2 == 0): x.append(json_data[i])
    else: y.append(json_data[i])
  return x, y

def boundary_filter(x_min, x_max, x_coord):
  for coord in x_coord:
    if((coord!=0) and (coord < x_min) or (coord > x_max)): 
      # print("coord: ", coord)
      return False
  return True

def check_boundary_filter(x_min, x_max, x, y_min, y_max, y):
  success_left = boundary_filter(x_min, x_max, x)
  success_right = boundary_filter(y_min, y_max, y)
  if((not success_left) or (not success_right)): return False
  return True

def create_image(IMG_HEIGHT, IMG_WIDTH, body_json=[], left_hand_json=[], right_hand_json=[], boundary_filter=True):
  
  # Define (important) parameters
  valid = True
  canvas = np.zeros((IMG_HEIGHT,IMG_WIDTH,3)) # (Height, Width) 
  color = (255,0,0) # Blue
  thickness = 5 # Hand thickness
  body_thickness = 5 # Body thickness
  x_min = IMG_WIDTH * 0.05
  x_max = IMG_WIDTH * 0.95
  y_min = IMG_HEIGHT * 0.05
  y_max = IMG_HEIGHT * 0.95
  
  # Body
  # Clean data
  body_data = clean_json_data(body_json)
  x, y = get_coordinates(body_data)
  if(boundary_filter and (not check_boundary_filter(x_min, x_max, x, y_min, y_max, y))): 
    valid = False
    # return (False, canvas)

  x[0] = 0 # Remove 'face line'
  y[0] = 0 # Remove 'face line'
  x[8:] = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0] # Remove face + legs
  y[8:] = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0] # Remove face + legs
  body_x = x
  body_y = y

  # Draw circles
  for idx in range(len(x)):
    if(x[idx] == 0 or y[idx] == 0): continue # Don't draw empty circles
    cv2.circle(canvas, (x[idx],y[idx]), 2, color, thickness=-1)

  # Draw arms
  # Right Arm
  if(x[1] and y[1] and x[2] and y[2]): cv2.line(canvas, (x[1], y[1]), (x[2], y[2]), color, thickness=body_thickness) 
  if(x[2] and y[2] and x[3] and y[3]): cv2.line(canvas, (x[2], y[2]), (x[3], y[3]), color, thickness=body_thickness) 
  if(x[3] and y[3] and x[4] and y[4]): cv2.line(canvas, (x[3], y[3]), (x[4], y[4]), color, thickness=body_thickness) 

  # Left Arm
  if(x[5] and y[5] and x[1] and y[1]): cv2.line(canvas, (x[1], y[1]), (x[5], y[5]), color, thickness=body_thickness) 
  if(x[5] and y[5] and x[6] and y[6]): cv2.line(canvas, (x[5], y[5]), (x[6], y[6]), color, thickness=body_thickness) 
  if(x[6] and y[6] and x[7] and y[7]): cv2.line(canvas, (x[6], y[6]), (x[7], y[7]), color, thickness=body_thickness) 
  
  # Draw face line (neck to chin) if desired
  # if(x[0] and y[0] and x[1] and y[1]): cv2.line(canvas, (x[1], y[1]), (x[0], y[0]), color, thickness=body_thickness) 

  # Hands
  left_hand_data = clean_json_data(left_hand_json)
  right_hand_data = clean_json_data(right_hand_json)
  hands = [left_hand_data, right_hand_data]

  for hand_idx in range(len(hands)): # Iterate over LH, RH
    
    # Clean data
    x, y = get_coordinates(hands[hand_idx])
    if(boundary_filter and (not check_boundary_filter(x_min, x_max, x, y_min, y_max, y))): 
      valid = False
      # return (False, canvas)

    # Draw circles
    for idx in range(len(x)):
      cv2.circle(canvas, (x[idx],y[idx]), 2, color, thickness=-1)

    # Draw hands
    # Palm
    if(x[0] and y[0] and x[17] and y[17]): cv2.line(canvas, (x[0], y[0]), (x[17], y[17]), color, thickness=thickness) 
    if(x[0] and y[0] and x[13] and y[13]): cv2.line(canvas, (x[0], y[0]), (x[13], y[13]), color, thickness=thickness) 
    if(x[0] and y[0] and x[9] and y[9]): cv2.line(canvas, (x[0], y[0]), (x[9], y[9]), color, thickness=thickness) 
    if(x[0] and y[0] and x[5] and y[5]): cv2.line(canvas, (x[0], y[0]), (x[5], y[5]), color, thickness=thickness) 
    if(x[0] and y[0] and x[1] and y[1]): cv2.line(canvas, (x[0], y[0]), (x[1], y[1]), color, thickness=thickness) 

    # Pinky
    if(x[18] and y[18] and x[17] and y[17]): cv2.line(canvas, (x[17], y[17]), (x[18], y[18]), color, thickness=thickness) 
    if(x[18] and y[18] and x[19] and y[19]):cv2.line(canvas, (x[18], y[18]), (x[19], y[19]), color, thickness=thickness) 
    if(x[19] and y[19] and x[20] and y[20]):cv2.line(canvas, (x[19], y[19]), (x[20], y[20]), color, thickness=thickness) 

    # Ring finger
    if(x[13] and y[13] and x[14] and y[14]): cv2.line(canvas, (x[13], y[13]), (x[14], y[14]), color, thickness=thickness) 
    if(x[14] and y[14] and x[15] and y[15]): cv2.line(canvas, (x[14], y[14]), (x[15], y[15]), color, thickness=thickness) 
    if(x[15] and y[15] and x[16] and y[16]): cv2.line(canvas, (x[15], y[15]), (x[16], y[16]), color, thickness=thickness) 

    # Middle finger
    if(x[9] and y[9] and x[10] and y[10]): cv2.line(canvas, (x[9], y[9]), (x[10], y[10]), color, thickness=thickness) 
    if(x[10] and y[10] and x[11] and y[11]): cv2.line(canvas, (x[10], y[10]), (x[11], y[11]), color, thickness=thickness) 
    if(x[11] and y[11] and x[12] and y[12]): cv2.line(canvas, (x[11], y[11]), (x[12], y[12]), color, thickness=thickness)

    # Index finger
    if(x[5] and y[5] and x[6] and y[6]): cv2.line(canvas, (x[5], y[5]), (x[6], y[6]), color, thickness=thickness) 
    if(x[6] and y[6] and x[7] and y[7]): cv2.line(canvas, (x[6], y[6]), (x[7], y[7]), color, thickness=thickness) 
    if(x[7] and y[7] and x[8] and y[8]): cv2.line(canvas, (x[7], y[7]), (x[8], y[8]), color, thickness=thickness) 

    # Thumb
    if(x[1] and y[1] and x[2] and y[2]): cv2.line(canvas, (x[1], y[1]), (x[2], y[2]), color, thickness=thickness) 
    if(x[2] and y[2] and x[3] and y[3]): cv2.line(canvas, (x[2], y[2]), (x[3], y[3]), color, thickness=thickness) 
    if(x[4] and y[4] and x[3] and y[3]): canvas = cv2.line(canvas, (x[3], y[3]), (x[4], y[4]), color, thickness=thickness) 

    # Connect left arm to left hand
    if (hand_idx == 0): # LH
      if(x[0] and y[0] and body_x[7] and body_y[7]): cv2.line(canvas, (x[0], y[0]), (body_x[7], body_y[7]), color, thickness=thickness) 

    # Connect left arm to right hand
    if (hand_idx == 1): # RH
      if(x[0] and y[0] and body_x[4] and body_y[4]): cv2.line(canvas, (x[0], y[0]), (body_x[4], body_y[4]), color, thickness=thickness) 
    
  return (valid, canvas)

# ------------------------------ Main ------------------------------ #

# ONLY Edit these parameters!!!
FOLDER = 'veggies/'
INPUT_DIR = '/scratch/user/skumar55/cooking/json_data/veggies/'
OUTPUT_DIR = os.path.join('/scratch/user/skumar55/cooking/json_images/', FOLDER)
IMG_WIDTH = 1920
IMG_HEIGHT = 1080
# Whether or not to apply the boundary filter
BOUNDARY_FILTER = 1

# Leave the rest unchanged 
print("Input folder: ", INPUT_DIR)
try: os.makedirs(OUTPUT_DIR) # Create output folder if nonexistent
except OSError as e: 
  if e.errno != errno.EEXIST: raise
print("Output folder: ", OUTPUT_DIR)

json_files = os.listdir(INPUT_DIR)
num_files_converted = 0
num_boundary_errors = 0
num_part_errors = 0
for (i,img) in enumerate(json_files):

  if(i%1000 == 0): 
    print("Iteration ", i)

  # if(i == 5): break

  # Read .json data 
  with open(INPUT_DIR + img) as f:
    json_data = json.load(f)

  try: 
    body_json = json_data['people'][0]['pose_keypoints_2d']
    left_hand_json = json_data['people'][0]['hand_left_keypoints_2d']
    right_hand_json = json_data['people'][0]['hand_right_keypoints_2d']

    # Ignore if hand/body is missing
    if(0 in left_hand_json or 0 in right_hand_json): 
      num_part_errors+=1
      continue 
    
    success, canvas = create_image(IMG_HEIGHT, IMG_WIDTH, body_json=body_json, left_hand_json=left_hand_json, right_hand_json=right_hand_json, boundary_filter=BOUNDARY_FILTER)
    # print(img, success)
    canvas = cv2.resize(canvas, (320, 240), interpolation = cv2.INTER_LINEAR) # Resize to match video size of (480x640)
    if(success): 
      # cropped_img = canvas[300:900, 350:1250] # For MPII
      # cropped_img = canvas[0:350, 115:640] # For P0-cut-ch0
      # canvas = cv2.resize(cropped_img, (320, 240), interpolation = cv2.INTER_LINEAR) # Resize to match video size of (480x640)
      cv2.imwrite(OUTPUT_DIR+img[:-5]+'.jpg', canvas)
      num_files_converted+=1

    else: # If conversion error
      print(img)
      cv2.imwrite('/scratch/user/skumar55/cooking/non_ideal_images/'+img[:-5]+'.jpg', canvas)
      num_boundary_errors+=1

  except:
    num_part_errors+=1

print('Success! Converted', len(json_files), '.json files to', num_files_converted, 'images!')
print("Number of boundary errors: ", num_boundary_errors)
print("Number of part errors: ", num_part_errors)