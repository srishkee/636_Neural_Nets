# -*- coding: utf-8 -*-
"""Cooking_GUI.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18jdoUdOLKqGM-hH-EGX4S45kLbsJTRdv
"""

# Working GUI!!!
import matplotlib
matplotlib.use('Agg')

import cv2
import numpy as np
from keras import layers
import keras.backend as K
from keras.models import Model, load_model
from keras.applications.inception_v3 import InceptionV3
from keras.preprocessing.image import load_img, img_to_array
from cooking_predict import get_image # IMP: NEED THIS FILE!!!

from tkinter import *
from tkinter import ttk
import tkinter as tk
from PIL import ImageTk, Image
from tkinter import filedialog

class Root(Tk):
    # 'self' refers to the Tkinter object
    
    def __init__(self): # Constructor
        super(Root, self).__init__()
        # Initialize Tkinter parameters
        self.title("Cooking Classifer!")
        self.minsize(800, 635)  
        self.configure(background = '#ff8000')
        self.label0=tk.Label(self, text="Welcome to the Cooking Classifier!", background='#ff8000', font=18)
        self.label0.text = "Welcome to the Cooking Classifier!"
        self.label0.place(x=100, y=50, anchor='center')
        self.label0.pack()
        self.button()
        weights_path = "cooking2.h5"
        global model
        model = load_model(weights_path)
        global labels
        labels = self.get_labels('cooking_labels.txt')
        
    def get_labels(self, path):
        with open(path, 'r') as f:
            labels = f.readlines()
            return labels

    def button(self):
        self.button = ttk.Button(self, text="Upload image!", command=self.display_image)
        self.button.place(x=150, y=200, anchor='center')
        self.button.pack()
        
    def get_predictions(self, filename):
        # Get predictions 
        test_image = get_image(filename, 480, 640)
        predictions = model.predict(test_image[np.newaxis,:])
        max_pred_idx = np.argmax(predictions)
        max_pred = str(predictions[0][max_pred_idx] * 100)
        print("Prediction: ", labels[max_pred_idx][:])
        my_text1 = "Prediction: " + labels[max_pred_idx][:] + ""
        my_text2 = "Accuracy: " + max_pred[:5] + "%"
        self.label1=tk.Label(self, text=my_text1, background='#ff8000')
        self.label1.text = my_text1
        self.label1.place(x=400, y=580, anchor='center', height=30, width=800)
        
        self.label2=tk.Label(self, text=my_text2, background='#ff8000')
        self.label2.text = my_text2
        self.label2.place(x=400, y=600, anchor='center', height=30, width=800)

    def display_image(self):
        print("Pressed button!")
        filename = filedialog.askopenfilename()
        if(filename != ""):
            print('Selected:', filename)
            my_img = cv2.imread(filename)
            b,g,r = cv2.split(my_img)
            my_img = cv2.merge((r,g,b))
            my_img = cv2.resize(my_img, (640, 480), interpolation = cv2.INTER_LINEAR) # Resize image
            img = ImageTk.PhotoImage(Image.fromarray(my_img))
            self.label=tk.Label(root, image=img)
            self.label.image=img
            self.label.place(x=400, y=315, anchor='center')
            self.get_predictions(filename)
        else: print('Error: Could not retrieve file!')

root = Root()
root.mainloop()